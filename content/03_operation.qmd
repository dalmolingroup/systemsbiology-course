## Funcionamento bÃ¡sico

## Operadores

-   Aritmetica basica

```{r, results=FALSE}
2+5         #Adicao                     
5-2         #Subtracao
2*5         #Multiplicacao
8/2         #Divisao
2^5         #Exponenciacao
5%%2        #Resto da divisÃ£o
```

-   Relacionais

```{r, results=FALSE}
3==5	      #Igual
3!=5	      #Diferente
3>5	        #Maior que
3<5	        #Menor que
3>=5	      #Maior ou igual
3<=5	      #Menor ou igual    
```

-   OperaÃ§Ãµes podem ser concatenadas:

```{r, results=FALSE}
((2+5-3)*10)^4/7^4
```

## VariÃ¡veis

A seta "\<-" representa o simbolo de atribuiÃ§Ã£o e ao escrever o nome do objeto, seu valor sera impresso. Veja o exemplo:

```{r}
x <- 1
x
```

Caso algum valor seja atribuÃ­do ao mesmo objeto, ele serÃ¡ sobrescrito:

```{r}
x <- "gol do gremio!"
x
```

Os resultados de operaÃ§Ãµes podem ser salvos em objetos:

```{r}
x<-2+5
y=5-2
2*5->w
z<-8/2

resultado <- (((x-y)*w)^z)/(x^z)
resultado
```

## FunÃ§Ãµes

Chamando funÃ§Ãµes:

```{r, class.source="standard-chunk"}
sum(1,3,5)
a <- rep("Aluno",times=3)
a
```

## Acessando a documentaÃ§Ã£o

Estas funÃ§Ãµes buscam e exibem a documentaÃ§Ã£o de funÃ§Ãµes:

```{r eval=FALSE}
help(sum)
?sd
??plot
```

## Vetores

funcao **c()** : concatenate

```{r}
number <- c(1, 2, 3, 4, 5)
letter <- c("x", "y", "z", "w", "j")
logical <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
seq <- 1:10
```

Hierarquia de classes

```{r}
x <- c(1, 2, 3)                   # Numeric
y <- c("1", "2", "3")             # Character
x <- c(TRUE, FALSE, FALSE)        # Logical
y <- c("TRUE", "FALSE", "FALSE")  # Character
```

Podemos somar vetores logicos

```{r}
sum(logical) 
```

::: callout-warning
Vetores comportam somente uma classe de elementos
:::

CoerÃ§Ã£o de objetos usando funÃ§Ãµes do tipo as.algumacoisa()

```{r}
x <- 0:10
x
class(x)

a <- as.numeric(x)
a
class(a)

b <- as.character(x)
b
class(b)

c <- as.logical(x)
c
class(c)
```

Vetores de NA

```{r}
x <- c(1, 2, 3, NA)
y <- c("a", "b", "c", NA)

is.na(x)
```

```{r}
a <- c(1, 3, NA, 7, 9)
sum(a)
sum(a, na.rm=TRUE)
```

Objetos possuem atributos: classe, tamanho, dimensoes, nomes, etc

```{r}
x <- 1:5
x
length(x)
dim(x)
attributes(x)
names(x) <- c("a", "b", "c", "d", "e")
x
attributes(x)
```

## Factor

Fatores sao vetores categÃ³ricos, possuem o atributo level

```{r}
x <- factor(c("s", "n", "n", "s", "s"))
z <- factor(c("alto", "baixo", "medio"))
```

## Matrix

Matrizes sÃ£o vetores com o atributo dimensÃ£o

```{r}
x <- 1:20
x
attributes(x)

m <- matrix(x, 4, 5)
m
attributes(m)          

dim(x) <- c(4,5)
x

identical(x, m)
```

::: callout-tip
Como sÃ£o vetores, matrizes comportam somente uma classe de elementos
:::

ManipulaÃ§Ã£o de matrizes

```{r}
a <- 1:5
b <- -1:-5
c <- c(3, 6, 4, 9, 1)

m <- cbind(a, b, c)       #funcao cbind() concatena colunas
m1 <- rbind(a, b, c)      #funcao rbind() concatena linhas
```

## Array

SÃ£o vetores multidimensionais

```{r}
ar <- array(1:200, c(5, 10, 4))    
ar
ar[,,1]                            #[linha, coluna, matrix]
```

## List

Listas sÃ£o tipos especiais de vetores, que comportam elementos de deferentes classes. cada elemento da lista aparece com \[\[\]\]

```{r}
a <- c(1, 3, NA, 7, 9)
b<-matrix(1:200, 20,10)
c<-"Gol do Gremio"
z<-factor(c("alto", "baixo", "medio"))

ls<-list(a, b, c, z)
ls                       
```

A funÃ§Ã£o vector pode criar listas vazias

```{r}
ls1<-vector("list", 5)  
ls1
```

## Data Frame

Formado por vetores de mesmo tamanho, organizados como colunas

```{r}
number<-c(1, 2, 3, 4, 5)
letter<-c("x", "y", "z", "w", "j")
logical<- c(TRUE, FALSE, FALSE, TRUE, FALSE)
seq<-1:10

dt<-data.frame(number, letter, logical)
class(dt)
dt$letter                     #usamos $ para acessar as colunas de um data.frame
class(dt$letter)              #vetores de caracter sao interpretados como fatores

dt<-data.frame(number, letter, logical, stringsAsFactors = F) #stringsAsFactors = F
dt$letter
class(dt$letter)

attributes(dt)                #data.frames possuem colnames e rownames
colnames(dt)
row.names(dt)

dt[5,2]                       #acessamos data.frames da mesma forma que matrizes
```

## Desafio

::: callout-tip
## Pratique sem IA!

Os desafios a seguir foram criados para ajudÃ¡-lo a desenvolver suas habilidades de forma independente.\
Evite o uso de InteligÃªncia Artificial e tente resolver os problemas por conta prÃ³pria.\
Aprender com a prÃ¡tica fortalecerÃ¡ seu raciocÃ­nio e aprofundarÃ¡ seu conhecimento! ðŸš€
:::

### **Vetores:** {.unnumbered}

Em R, os vetores sÃ£o um dos tipos mais bÃ¡sicos de objetos. Eles sÃ£o parecidos com os vetores que vimos na matemÃ¡tica. A diferenÃ§a Ã© que aqui podemos ter vetores nÃ£o sÃ³ de nÃºmeros, mas tambÃ©m de letras (caracteres).

1.  Um vetor de nÃºmeros pode ser construÃ­do assim:

    ```{r}
    num <- c(1,2,3,4)
    ```

    Se vocÃª executar essa linha acima terÃ¡ criado um vetor com o nome de "num" que contÃ©m os elementos 1,2,3 e 4.

    Para criarmos um vetor, utilizamos a funÃ§Ã£o "c()".

a)  **Experimente fazer um vetor chamado "num2" e que contenha os seguintes elementos: 1,a,3,b. Depois veja qual a classe dos elementos desse vetor usando a funÃ§Ã£o class(). OBS: NÃ£o esqueÃ§a que letras e palavras tem de ser colocadas entre aspas.**

b)  **Agora crie um vetor num3 com os elementos: 1,2,3,4,5. Use a funÃ§Ã£o class() para saber qual a classe dos elementos desse vetor**

c)  **Por que a classe dos vetores 'num2' e 'num3' Ã© diferente?**

2.  JosÃ© e Paulo adoram jogar basquete nas suas horas livres. Eles mantÃ©m uma competiÃ§Ã£o entre si e por isso decidiram registrar todos os pontos que eles marcam durante as partidas.

AtÃ© agora foram 8 partidas:

-   JosÃ© fez 8, 10, 12, 9, 15, 16, 11, 7 cestas.

-   Paulo fez 5, 11, 13, 14, 23, 14, 9, 10 cestas.

a)  **Crie dois objetos que contenham o nÃºmero de cestas que cada um fez:**

b)  **Verifique a classe de cada um dos objetos:**

c)  **Com a utilizaÃ§Ã£o da ajuda do R, procure por uma funÃ§Ã£o que possibilite o cÃ¡lculo de mÃ©dias. Com ela, calcule as mÃ©dias de cestas dos dois jogadores e atribua estes valores a objetos diferentes:**

d)  **Compare os valores das mÃ©dias calculadas usando os operadores lÃ³gicos "\>" e "\<". Quem teve um desempenho mÃ©dio melhor?**

### Data Frames: {.unnumbered}

Vetores sÃ£o muito Ãºteis, mas na medida que trabalhamos com muitos tipos de vetores e com mais valores, fica mais  complicado. Para contornar esse problema, nÃ³s temos em R um objeto chamado de Dataframe. O Dataframe Ã© uma espÃ©cie de matriz: tem linhas e colunas. A diferenÃ§a Ã©: numa matriz, todos as colunas tem um mesmo tipo, enquanto em um data.frame podemos ter em cada coluna um tipo diferente de dado. Assim, dataframes podem ter uma coluna de um vetor numÃ©rico e outra de um vetor de caracteres.

O data.frame 'contagem' mostra a quantidade de cÃ©lulas contadas por 5 ICs diferentes durante a primeira semana de trabalho no laboratÃ³rio.

```{r}
contagem <- data.frame(IC = c('VocÃª','JoÃ£o','Fernanda','JÃºlio','Larissa'),
                       semana_1 = c(30, 46, 50, 20, 10))
```

Na segunda semana de experimento, todos os ICs do laboratÃ³rio repetiram a contagem, e os nÃºmeros de cÃ©lulas contadas foram: 10, 39, 55, 11, 20.

a)  **Crie uma nova coluna neste mesmo dataframe chamada de 'semana_2' com estes nÃºmeros.**

b)  **O chefe do laboratÃ³rio pediu para que os ICs mostrassem qual deles contou o maior e o menor nÃºmero de cÃ©lulas em cada semana. Procure por funÃ§Ãµes no R que mostre qual valor de contagem na semana 1 Ã© maior e qual Ã© o menor.**
