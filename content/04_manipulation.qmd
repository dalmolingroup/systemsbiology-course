## Manipula√ß√£o de Vetores, Data Frames e Listas

## Trabalhando com Vetores

Opera√ß√µes vetorizadas

```{r}
x<-1:5
y<-6:10
x+y               #ocorre a soma dos valores de ambos os vetores

x*2               #podemos multiplicar um vetor por um numero
x^2

z<-c(x,y)
z+x
w<-1:3
w+x

l<-c(T, T, F, T, F, F)
l/2
```

Para acessar vetores, usamos \[ \]

```{r}
letter <- c("x", "y", "z", "w", "j")
letter[2]               #acessa o segundo elemento do vetor
letter[2:4]             #podemos usar sequencia de valores
letter[c(1, 4)]         #usamos a funcao c() para valores nao contiguos
letter[-2]              #usamos numeros negativos para excluir um ou mais valores
letter[c(-2, -5)]

idx <- c(1, 4)          #podemos criar indices numericos
letter[idx]

x<-1:10                 
x[x>7]                  #podemos usar "<", "==", ">=", etc.

letter[letter>"k"]      #tambem eh possivel para caracteres
letter[letter<"k"]
letter=="z"
```

Fun√ß√µes para identificar valores extremos

```{r}
set.seed(1)
s <- sample(-1000:1000, 200)

which.max(s)            #procura a posicao do maior valor
max(s)                  #imprime o maior valor 
range(s)

s>0                     #cria um vetor logico
which(s>0)              #cria um vetor com as posicoes que satisfazem o comando
```

::: {.callout-tip collapse="true"}
## Ex.1: Quantos valores de s sao maiores que 0?

```{r }
length(which(s>0))
```
:::

::: {.callout-tip collapse="true"}
## Ex.2: Fa√ßa um vetor contendo os valores de S maiores do que 0.

```{r }
maior_que_zero <- s[which(s>0)]
```
:::

Fun√ß√µes de ordenamento

```{r}
x < -c(3, 8, 2, 1, 5, 9, 7, 7, 3)
x      
sort(x)                 #ordena um vetor
sort(x, decreasing = T)
order(x)                #retorna a ordem de cada elemento para torn√°-lo crescente
sample(x)               #randomiza
unique(x)               #elimina as replicatas
duplicated(x)           #logico
```

::: {.callout-tip collapse="true"}
## Ex.3: quantos duplicados existem em x?

```{r }
length(which(duplicated(x)))
#ou
length(x[duplicated(x)])
```
:::

## Trabalhando com data.frames

Para acessar data.frames e listas usamos \[\], \[\[\]\] ou \$

```{r}
dt <- data.frame(number=c(1, 2, 3, 4, 5), 
               letter = c("x", "y", "z", "w", "j"),
               logical = c(TRUE, FALSE, FALSE, TRUE, FALSE))

dt[[1]]              # [[ ]] acessa cada coluna por posicao
dt[,1]               # [ ] acessa as coordenadas [linha, coluna]
dt$number            # $ acessa cada coluna por nome
```

data.frames possuem colnames e rownames

```{r}
colnames(dt)
row.names(dt)
```

Podemos alterar colanmes e rownames

```{r}
row.names(dt) <- c("a", "b", "c", "d", "e")
colnames(dt)[2] <- "letras"     #alteramos unicamente a posicao 2
```

Podemos alterar valores espec√≠ficos de um data.frame

```{r}
dt[3,1] <- "10"
dt$logical<-as.numeric(dt$logical)
dt$letras<-NA
```

Podemos verificar as ocorr√™ncias de um data.frame em outro

```{r}
biometria <- data.frame(nomes=c("Carlos", "Roberto", "Olivio", "Joel"),
                      altura=c(180, 187, 155, 168),
                      peso=c(80, 90, 98, 64))
esportes <- data.frame(nomes=c("Carlos", "Roberto", "Olivio", "Jomar"),
                     esportes=c("futebol", "remo", "sumo", "maratona"))

biometria$nomes%in%esportes$nomes         #constroi um logico 
idx <- biometria$nomes%in%esportes$nomes    #pode ser usado como indice
x <- biometria[idx,]   
```

Ordenando data.frames por uma coluna

```{r}
biometria <- biometria[with(biometria, order(altura)), ]
```

Unindo data.frames com a fun√ß√£o merge()

```{r}
unido <- merge(biometria, esportes, by="nomes")   
```

::: callout-warning
Independe da ordem dos data.frames! A busca √© feita pelo nome, n√£o pela ordem! O resultado sempre vir√° em ordem alfab√©tica!
:::

```{r}
unido<-merge(biometria, esportes, by="nomes", all.x=T) #com todos presentos no primeiro
unido<-merge(biometria, esportes, by="nomes", all.y=T) #com todos presentos no segundo
unido<-merge(biometria, esportes, by="nomes", all=T)   #com todos presentos
```

::: callout-warning
Nesse caso, as informa√ß√µes faltantes s√£o preenchidas por NA!
:::

## Trabalhando com Listas

```{r}
ls<-list(a=c("x", "y", "z", "w", "j"), b=1:4, c=c("Joca", "Bia", "Licurgo"), d=dt)

ls[1]
ls[[1]]
ls$a

class(ls[1])
class(ls[[1]])

ls[[c(3,2)]]      #posi√ß√£o na lista e posi√ß√£o no elemento
```

## Desafio

::: callout-tip
## Pratique sem IA!

Os desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\
Evite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\
Aprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ
:::

1.  Considere o seguinte vetor:

```{r}
x <- c(1, 45, 6, 88, 30, 4)
```

a)  Obtenha um outro vetor a partir deste que contenha apenas os elementos da posi√ß√£o 2 e da √∫ltima posi√ß√£o.

b)  Atribua um nome para cada um dos elementos do vetor x.

c)  Ordene o vetor x, em ordem crescente, de duas maneiras: usando a fun√ß√£o sort() e a fun√ß√£o order().

<!-- -->

2.  Considere os seguintes vetores:

```{r}
x <- c(5, 2, 1, 4)
xx <- c(1, 10, 15, 18)
y <- rep(1, 5)
z <- c(TRUE, FALSE, TRUE, TRUE)
w <- c("Maria", "Elisa", "Pedro")
```

Explique a opera√ß√£o realizada por cada um dos comandos nos itens abaixo:

a)  

```{r}
sum(x) 
range(x) 
length(y) 
sum(y) 
```

b)  

```{r}
c(x, y, 13)
```

c)  

```{r}
xx - x 
c(x, 12) * y 
1:6 + 1 
1:9 + 1:2
```

d)  

```{r}
x <= 2 
x <= 2 & z 
```

e)  

```{r}
substring(w, 2, 4) 
paste(substring(w, 1, 2), substring(w, 5, 5), sep = "...") 
```

3.  Considere o vetor:

```{r}
set.seed(1)
v <- sample(1:100, 20)
```

a)  **Quantos elementos do vetor 'v' s√£o maiores que 60?**

b)  **Quais as posi√ß√µes do vetor 'v' que contem elementos maiores que 60?**

c)  **Obtenha o valor m√°ximo do vetor 'v'. Use pelo menos duas abordagens** **diferentes.**

<!-- -->

4.  Crie as seguintes sequ√™ncias apenas usando as fun√ß√µes 'rep()' e 'seq()'. Verifique a documenta√ß√£o das fun√ß√µes.

<!-- -->

a)  **1 2 3 4 5 6 7 8 9**

b)  **"m" "w" "m" "w" "m" "w" "m" "w" "m" "w"**

c)  **1 2 3 4 1 2 3 4 1 2 3 4**

d)  **4 4 4 3 3 3 2 2 2 1 1 1**

e)  **1 2 2 3 3 3 4 4 4 4 5 5 5 5 5**

f)  **1 1 3 3 5 5 7 7 9 9 11 11**
