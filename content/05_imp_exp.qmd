# Importa√ß√£o e exporta√ß√£o de dados 
Uma das habilidades b√°sicas necess√°rias para se fazer an√°lises com o R √© importar arquivos e fazer conex√µes com, por exemplo, bancos de dados, e exportar os resultados obtidos em formatos que possam ser lidos pela maioria dos softwares atuais. 

## Importando arquivos

Vamos aqui listar algumas fun√ß√µes √∫teis para a importa√ß√£o de arquivos no R. 

- `source()`

A fun√ß√£o `source()` carrega arquivos de scripts em R e executa os comandos ali contidos.
```{r eval=FALSE}
# Caminho onde o script est√° salvo
source("/home/usuario/√Årea de Trabalho/script.R") 
```

- `load()`

A fun√ß√£o `load()` permite o carregamento de arquivos bin√°rios reconhec√≠veis pelo R. A extens√£o *.RData* √© reconhecida pelo RStudio. 
```{r eval=FALSE}
# Caminho onde o .RData est√° salvo
load("/home/usuario/√Årea de Trabalho/arquivo.RData") 
```

## Importando dados tabulares
A principal fun√ß√£o para importar dados tabulares (tabelas, planilhas, etc.) para o R √© a `read.table()`. Esta fun√ß√£o possui v√°rios argumentos que podem ser modificados.  
Antes de carregar dados tabulares no R, √© importante saber como o dado est√° organizado (se a separa√ß√£o entre as colunas √© feita por tabula√ß√£o ou por v√≠rgula, por exemplo.)

Alguns argumentos cuja modifica√ß√£o pode ser √∫til para a importa√ß√£o da tabela:

- `file`: caminho do diret√≥rio onde o arquivo est√°.
- `header`: se `FALSE`, n√£o considera o cabe√ßalho (se houver) da tabela
- `sep`: como o dado est√° separado. Se por tabula√ß√£o, `sep = "\t"`, se por v√≠rgula, `sep = ","`
- `dec`: como os n√∫meros decimais s√£o definidos, se com "." ou ",".
- `col.names` e `row.names`: recebem um vetor contendo os nomes das colunas e das linhas, respectivamente.
- `quote`: atribui um caracter para as aspas. Por padr√£o, atribui "". 
- `comment.char`: atribui um caracter para ser usado como coment√°rio. 
- `skip`: valor num√©rico. Pula a importa√ß√£o da quantidade definida de linhas. 
- `stringsAsFactors`: se uma das colunas da tabela for um vetor de caracteres, a op√ß√£o `TRUE` a considera como um vetor de fatores. 

Outras duas fun√ß√µes bastante utilizadas s√£o derivadas da fun√ß√£o `read.table()`. Estas possuem os mesmos argumentos da fun√ß√£o `read.table()`.

- `read.delim()`: por default, considera o argumento `sep = "\t"`. √ötil para a importa√ß√£o de arquivos cujos elementos s√£o separados por tabula√ß√µes. 
- `read.csv()`: por default, considera o argumento `sep = ","`. √ötil para leitura de arquivos *.csv*. 

## Importando arquivos de estrutura desconhecida
Quando lidamos com arquivos dos quais desconhecemos a sua estrutura, podemos dispor de algumas estrat√©gias para facilitar a importa√ß√£o deles para o R. 

Podemos usar a fun√ß√£o `readLines()`. Esta fun√ß√£o pode abrir uma conex√£o (ver adiante) com um arquivo e ler o conte√∫do de suas linhas. A sa√≠da da fun√ß√£o √© um vetor de caracteres, onde o conte√∫do de cada linha do arquivo original compreender√° uma posi√ß√£o do vetor de sa√≠da. Este procedimento pode revelar como o dado est√° organizado: se √© um dado tabulado, como os elementos de cada coluna est√£o separados, etc. 
```{r eval=FALSE}
# Ir√° ler as 10 primeiras linhas do arquivo
readLines("COG.mappings.v9.0.txt", 10) 
```

Uma outra forma de desvendar a estrutura de um arquivo √© usando a fun√ß√£o `scan()`. A sa√≠da da fun√ß√£o `scan()` √© um vetor de caracteres onde cada string do arquivo original compreender√° uma posi√ß√£o do vetor de sa√≠da.

```{r eval=FALSE}
scan(file = 'COG.mappings.v9.0.txt', nlines = 10, what = character())
```

## Conex√µes
As fun√ß√µes citadas anteriormente tem em comum a capacidade de abrirem conex√µes com arquivos e extra√≠rem as informa√ß√µes neles contidas. Al√©m destas, o R possui muitas outras fun√ß√µes para lidar com outros tipos de arquivos e dados externos ao R.

Pode-se tamb√©m estabelecer conex√µes com sites da web:
```{r eval=FALSE}
# url() abre uma conex√£o com arquivo web
con <- url("http://www.tribunadonorte.com.br/", "r", 10)
x <- readLines(con)
x[1:10]
close(con)
```

## Salvando arquivos
Os objetos do R podem ser salvos em arquivos *.RData* por meio da fun√ß√£o `save()`. Uma quantidade indeterminada de objetos podem ser salvos no mesmo arquivo *.RData*.
```{r eval=FALSE}
save(unido, biometria, esportes, file = "arquivo.RData")    
```

Outra funcionalidade √∫til √© a exporta√ß√£o de objetos tabulares do R para arquivos de texto. Para isso, usamos a fun√ß√£o `write.table()`. Esta fun√ß√£o possui argumentos semelhantes aos da fun√ß√£o `read.table()`. 

Ao usar a fun√ß√£o `write.table()`, √© importante definir o diret√≥rio no qual o arquivo ser√° salvo e o tipo de separador usado para separar os elementos (argumento `sep`). Segue a seguinte estrutura:

```{r eval=FALSE}
write.table(<objeto>, file = <diret√≥rio de destino>, sep = <separador>)
```

Exemplo:
```{r eval=FALSE}
write.table(table1, file = "arquivo.txt", sep = "\t", row.names = FALSE, quote = FALSE)
```

Al√©m disso, tamb√©m como a fun√ß√£o `read.table()`, `write.table()` possui outras fun√ß√µes gen√©ricas como `write.csv()`, por exemplo, a qual possui o argumento `sep = ","` por default.

## Desafio

::: callout-tip
## Pratique sem IA!

Os desafios a seguir foram criados para ajud√°-lo a desenvolver suas habilidades de forma independente.\
Evite o uso de Intelig√™ncia Artificial e tente resolver os problemas por conta pr√≥pria.\
Aprender com a pr√°tica fortalecer√° seu racioc√≠nio e aprofundar√° seu conhecimento! üöÄ
:::

Este exerc√≠cio ser√° feito usando o arquivo 'happiness.csv' em `content/data/hapiness.csv` 

1. Neste exerc√≠cio, vamos importar uma tabela (em arquivo de texto) como um dataframe, fazer algumas opera√ß√µes e em seguida vamos salvar o resultado em um outro arquivo de texto. Antes de importar o arquivo, verifique sua estrutura (como as colunas est√£o separadas, se tem cabe√ßalho, etc.)


a) Importe o arquivo corretamente e o armazene em uma vari√°vel. Obs.: A tabela possui alguns campos num√©ricos onde o separador decimal √© uma v√≠rgula. Importe a tabela de modo que as v√≠rgulas sejam transformadas em pontos (procure ajuda na documenta√ß√£o das fun√ß√µes de importa√ß√£o vistas na aula).

b) Verifique se a classe das colunas do dataframe condizem com o tipo de dado armazenado. Por exemplo, a coluna dos pa√≠ses √© um vetor de caracter?

c) Crie um subset do dataframe contendo apenas as informa√ß√µes dos pa√≠ses da Am√©rica Latina e Caribe.

d) De acordo com o rank de felicidade, qual pa√≠s da Am√©rica Latina √© o mais feliz?

e) Crie um outro subset contendo apenas os pa√≠ses europeus. Calcule a m√©dia de felicidade (baseando-se no score de felicidade) dos pa√≠ses europeus e dos pa√≠ses da Am√©rica Latina. Em qual regi√£o as  pessoas s√£o mais felizes?

f) Salve o dataframe com as informa√ß√µes da Am√©rica Latina em um arquivo de texto. Ele deve utilizar como separador o ';'. 

